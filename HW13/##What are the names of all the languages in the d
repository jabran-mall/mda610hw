##What are the names of all the languages in the database? Sort the languages alphabetically.
ANSWER:
USE sakila;
SELECT *
FROM language
ORDER BY name 

##Return the full names (first and last) of all actors with "BER" in their last name. Sort the returned names by their first name. (Hint: use the CONCAT() function to add two or more strings together.)
##ANSWER:
SELECT * FROM sakila.actor;
Select *
FROM actor 
WHERE last_name REGEXP 'BER'
ORDER BY first_name 

##How many last names are not repeated in the actor table?
ANSWER:
SELECT * FROM sakila.actor;
Select DISTINCT last_name
FROM actor 

##How many films involve a "Crocodile" and a "Shark"?
ANSWER:
SELECT * FROM sakila.film;
SELECT *
FROM film
WHERE discription LIKE 'crocodile|shark' 

Return the full names of the actors who played in a film involving a "Crocodile" and a "Shark", along with the release year of the movie, sorted by the actors' last names.
ANSWER:
USE sakila;
SELECT concat(first_name, ' ', last_name) AS Name,
release_year
FROM film a JOIN actor b JOIN film_actor c
ON a.film_id=c.film_id
AND b.actor_id=c.actor_id
WHERE description LIKE '%Crocodile%'
OR description LIKE '%Shark%'
ORDER BY last_name ASC;

Return the full names of the actors who played in a film involving a "Crocodile" and a "Shark", along with the release year of the movie, sorted by the actors' last names.

ANSWER:
SELECT count(*), name
FROM film_category a JOIN category b
ON a.category_id=b.category_id
GROUP BY b.category_id
HAVING 40<=count(*)<=60
ORDER BY count(*) DESC;

# first name same as actor with ID 24.

ANSWER:
SELECT concat(first_name, ' ', last_name) AS Name
FROM actor
WHERE first_name=(SELECT first_name
FROM actor
WHERE actor_id=24);

# full name of the actor who has appeared in the most films.

ANSWER:
SELECT concat(first_name, ' ', last_name) AS Name,
count(a.actor_id)
FROM film_actor a JOIN actor b
ON a.actor_id=b.actor_id
GROUP BY a.actor_id
ORDER BY count(a.actor_id) DESC
LIMIT 1;

# Return the film categories with an AVG length longer than overall AVG
ANSWER:
SELECT name, AVG(length)
FROM film a JOIN category b JOIN film_category c
ON a.film_id=c.film_id
AND b.category_id=c.category_id
GROUP BY name
HAVING AVG(length)>(SELECT AVG(length)
FROM film);

# Return the total sales of each store.
ANSWER:
SELECT total_sales
FROM sales_by_store;GROUP BY name
HAVING AVG(length)>(SELECT AVG(length)
FROM film);